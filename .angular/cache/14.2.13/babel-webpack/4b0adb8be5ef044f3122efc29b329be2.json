{"ast":null,"code":"import _defineProperty from \"C:/Users/User/Documents/ANGULAR/angular-schwarzm\\xFCller/Reactive FORMS/forms-reactive-assignment-start/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"C:/Users/User/Documents/ANGULAR/angular-schwarzm\\xFCller/Reactive FORMS/forms-reactive-assignment-start/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/User/Documents/ANGULAR/angular-schwarzm\\xFCller/Reactive FORMS/forms-reactive-assignment-start/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { CustomValidators } from \"./custom-validators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\n\nfunction AppComponent_span_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 14);\n    i0.ɵɵtext(1, \"This name is forbidden!\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AppComponent_option_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var status_r2 = ctx.$implicit;\n    i0.ɵɵpropertyInterpolate(\"value\", status_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", status_r2, \" \");\n  }\n}\n\nexport var AppComponent = /*#__PURE__*/(function () {\n  var AppComponent = /*#__PURE__*/function () {\n    function AppComponent() {\n      _classCallCheck(this, AppComponent);\n\n      this.projectStatus = [\"stable\", \"critical\", \"finished\"];\n      this.forbiddenProjectNames = [\"Test\"];\n    }\n\n    return _createClass(AppComponent, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.projectForm = new FormGroup(_defineProperty(_defineProperty(_defineProperty({}, \"projectName\", new FormControl(null, [Validators.required, CustomValidators.invalidProjectName], this.forbiddenNamesAsync)), \"email\", new FormControl(null, [Validators.required, Validators.email])), \"projectStatus\", new FormControl(null)));\n      }\n    }, {\n      key: \"onSubmit\",\n      value: function onSubmit() {\n        // observable which tracks valueChanges and statusChanges which you can subscribe to\n        console.log(this.projectForm.value); // this.projectForm.reset({ projectStatus: \"stable\" });\n      } // this is our custom validator method:\n\n    }, {\n      key: \"forbiddenNames\",\n      value: function forbiddenNames(control) {\n        if (this.forbiddenProjectNames.indexOf(control.value) !== -1) {\n          return {\n            projectNameIsForbidden: true\n          };\n        }\n\n        return null;\n      } // asynchronous validator: waiting for response from a timer (i.e. mock web server), if valid or not:\n\n    }, {\n      key: \"forbiddenNamesAsync\",\n      value: function forbiddenNamesAsync(control) {\n        var promise = new Promise(function (resolve) {\n          setTimeout(function () {\n            if (control.value === \"Test\") {\n              resolve({\n                \"This project name is forbidden\": true\n              });\n            } else {\n              resolve(null);\n            }\n          }, 1500);\n        });\n        return promise;\n      }\n    }]);\n  }();\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)();\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    decls: 20,\n    vars: 3,\n    consts: [[1, \"container\"], [1, \"row\"], [1, \"col-xs-12\", \"col-sm-10\", \"col-md-8\", \"col-sm-offset-1\", \"col-md-offset-2\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"projectName\"], [\"type\", \"text\", \"name\", \"projectName\", \"id\", \"projectName\", \"formControlName\", \"projectName\"], [\"class\", \"help-block error-message\", 4, \"ngIf\"], [\"for\", \"email\"], [\"type\", \"email\", \"name\", \"email\", \"id\", \"email\", \"formControlName\", \"email\"], [\"for\", \"projectStatus\"], [\"name\", \"projectStatus\", \"id\", \"projectStatus\", \"formControlName\", \"projectStatus\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"submit\", 1, \"btn\", \"btn-warning\"], [1, \"help-block\", \"error-message\"], [3, \"value\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"form\", 3);\n        i0.ɵɵlistener(\"ngSubmit\", function AppComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(4, \"div\", 4)(5, \"label\", 5);\n        i0.ɵɵtext(6, \"Project Name: \");\n        i0.ɵɵelement(7, \"input\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(8, AppComponent_span_8_Template, 2, 0, \"span\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 4)(10, \"label\", 8);\n        i0.ɵɵtext(11, \"Email: \");\n        i0.ɵɵelement(12, \"input\", 9);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(13, \"div\")(14, \"label\", 10);\n        i0.ɵɵtext(15, \"Status of Project: \");\n        i0.ɵɵelementStart(16, \"select\", 11);\n        i0.ɵɵtemplate(17, AppComponent_option_17_Template, 2, 2, \"option\", 12);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(18, \"button\", 13);\n        i0.ɵɵtext(19, \"Submit\");\n        i0.ɵɵelementEnd()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.projectForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.projectForm.get(\"projectName\").invalid && ctx.projectForm.get(\"projectName\").touched);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngForOf\", ctx.projectStatus);\n      }\n    },\n    dependencies: [i1.NgForOf, i1.NgIf, i2.ɵNgNoValidate, i2.NgSelectOption, i2.ɵNgSelectMultipleOption, i2.DefaultValueAccessor, i2.SelectControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n    styles: [\".container[_ngcontent-%COMP%]{margin-top:30px}input.ng-invalid.ng-touched[_ngcontent-%COMP%]{border:1px solid red}.error-message[_ngcontent-%COMP%]{color:red}\"]\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}